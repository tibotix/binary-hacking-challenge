from pwn import *
import sys
import pathlib
import itertools
import base64

if len(sys.argv) != 2:
    print(f"Usage: python3 {sys.argv[0]} <exploit-binary>")
    sys.exit(0)

host = "localhost"
port = 1024
filepath = sys.argv[1]
file = pathlib.Path(filepath) if filepath.startswith("/") else pathlib.Path(__file__).parent / filepath

if not file.exists():
    print(f"exploit-binary file '{filepath}' does not exist!")
    sys.exit(0)

data = file.read_bytes()

# ================================================

# from itertools
def batched(iterable, n, *, strict=False):
    # batched('ABCDEFG', 3) â†’ ABC DEF G
    if n < 1:
        raise ValueError('n must be at least one')
    iterator = iter(iterable)
    while batch := tuple(itertools.islice(iterator, n)):
        if strict and len(batch) != n:
            raise ValueError('batched(): incomplete batch')
        yield batch

# ================================================

p = remote(host, port)
p.sendlineafter(b"(MB): ", b"4") # Use 4MB RAM
p.recvuntil(b"END")

data = base64.b64encode(data)
for chunk in batched(data, 0x100):
    p.sendline(bytearray(chunk))
input("Press enter to send the END sequence...")
p.sendline(b"END")

p.interactive()

